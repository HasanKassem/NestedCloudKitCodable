//
//  CKCodableError.swift
//  NestedCloudKitCodable
//
//  Created by Guilherme Girotto on 18/11/18.
//  Copyright Â© 2018 Guilherme Girotto. All rights reserved.
//

import Foundation

public struct CKCodableError: Error {

    enum ErrorType: String {
        /// An error generated by Cloudkit
        case cloudkitError
        /// An inconsistency occurred at Cloudkit.
        /// It normally occurs when a request doesn't returns neither an error nor a value
        case cloudkitInconsistence
        /// CKRecord not found
        case recordNotFound
        /// Tryied to encode/decode a value that is not Codable.
        case typeMismatch

        var identifier: String { rawValue }

        var description: String {
            switch self {
            case .cloudkitError:
                return "Cloudkit returned with an error. See context for more information."
            case .cloudkitInconsistence:
                return """
                        An inconsistency occurred at Cloudkit.
                        It normally occurs when a request doesn't returns neither an error nor a value.
                        """
            case .recordNotFound:
                return """
                        Tryied to decode a CKRecord that doesn't exists.
                        Possibly occured because this CKRecord is not linked with the main object CKRecord in Cloudkit
                        """
            case .typeMismatch:
                return """
                        Tryied to encode/decode a value that doesnt conform to Codable protocol.
                        See context for more information
                       """
            }
        }
    }

    var errorType: ErrorType
    var context: [String: Any]?
    var description: String { errorType.description }

    init(_ errorType: ErrorType, context: [String: Any] = [:]) {
        self.errorType = errorType
        self.context = nil
    }
}

extension CKCodableError: Equatable {
    public static func == (lhs: CKCodableError, rhs: CKCodableError) -> Bool {
        return lhs.errorType.identifier == rhs.errorType.identifier
    }
}

extension CKCodableError {
    static func error(fromCloudkitError error: Error) -> CKCodableError? {
        return CKCodableError(.cloudkitError, context: ["Error:": error])
    }
}
